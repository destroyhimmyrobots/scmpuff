// Code generated by go-bindata.
// sources:
// data/aliases.sh
// data/git_wrapper.sh
// data/status_shortcuts.sh
// DO NOT EDIT!

package inits

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAliasesSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\xc9\x41\x0a\xc4\x20\x0c\x05\xd0\xfd\x9c\xc2\x9d\xa7\xf0\x2c\x43\x48\x8c\x95\x5a\x2c\xfe\x78\xff\x16\x52\xb2\x7d\x8f\x46\x27\xa4\x86\x92\xc1\xd7\xbd\x55\xff\x30\xb2\x8d\xfc\xfb\x86\x4a\x6e\xdd\x12\x89\x04\x89\x93\x74\xd5\xb0\xe1\x36\x66\x0b\xe2\xe9\xc6\x47\xe5\x73\x6e\x8b\x58\xf0\x58\x15\xf5\xd5\x27\x00\x00\xff\xff\xb3\xf6\xf4\x39\x83\x00\x00\x00")

func dataAliasesShBytes() ([]byte, error) {
	return bindataRead(
		_dataAliasesSh,
		"data/aliases.sh",
	)
}

func dataAliasesSh() (*asset, error) {
	bytes, err := dataAliasesShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aliases.sh", size: 131, mode: os.FileMode(420), modTime: time.Unix(1426541666, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataGit_wrapperSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x51\x4f\x6b\xdb\x30\x14\xbf\xeb\x53\x3c\x9c\xb0\xc4\x63\x21\x64\x57\xb3\x30\xc8\xc8\xd8\x21\x30\xb6\x85\x5d\x0a\x41\xb1\x9f\xec\x47\x65\xc9\x48\xb2\x93\x50\xf7\xbb\xf7\xc9\x49\x7b\x08\x0d\x2d\xf4\x24\xde\xef\xaf\x9e\x34\x82\x3f\x58\xdb\x0e\x41\x9a\x13\xe0\x91\x7c\x20\x53\x42\x49\x01\xa4\x26\xe9\xc1\x3a\x50\xad\xc9\x03\x59\x23\x5a\x73\xc6\x22\xbb\x84\x79\x81\xdd\xdc\xb4\x5a\xc3\xd7\xe5\xa7\x05\x93\x1e\x03\xcc\xd4\xeb\xac\x18\xc1\xd6\x23\x84\x0a\x39\x8e\xc1\x46\x86\x0a\x82\x1d\xc4\x7c\xc8\xce\x52\x01\x64\x14\x19\x0a\x08\xda\xda\x06\x0e\xc4\x92\xc8\xbf\xf4\xe3\xb1\xb1\x2e\xc0\xdf\xd5\xe6\xf7\x76\xbd\xde\xfd\xfc\xf5\x6f\xb7\xda\xfc\xf8\x96\x8c\xa7\x77\x87\x8a\xf2\x41\x9d\x26\xb1\xeb\xbf\x93\xcd\xe0\x1d\x42\x62\xeb\xa4\x6a\xf7\x93\x08\xf1\x09\x07\xa6\x1b\x74\x5f\x80\x14\x97\xfa\x20\xb5\xc6\x42\xf0\x10\x4e\x0d\x42\x54\x5c\x2f\x90\xc5\x10\x03\xb7\x6e\xc0\x96\x24\x03\x45\x42\x70\xc3\x34\x85\x07\x01\x90\x4b\x5e\x78\xbc\xe0\x02\x1e\x78\xb4\x75\x4d\xa1\xdf\x6b\x59\x63\xaf\x6d\xd9\x3b\xdc\xb3\xa2\xaf\xd1\x95\x98\x0e\x12\x00\xec\xa4\x06\xde\xc7\xe7\x75\xd3\x2a\x15\xfb\xa4\x29\x60\x36\x63\xf0\xaa\x34\x61\xe8\x7b\x92\x26\x59\x76\x8e\xaf\x30\xbf\xb7\x6d\xe8\x0b\x52\xaa\x77\x35\xc7\xf3\x7f\xbc\x99\xeb\x50\xcb\x40\xfc\xfd\xef\xa8\x90\x45\xf1\x81\x7b\x5e\x9c\x17\xc7\x8e\x1f\x3d\xb4\xfe\x92\xfc\xf9\x39\xf7\x86\x7b\x90\xa1\x97\xb9\x78\x14\x4f\x01\x00\x00\xff\xff\x51\x13\x5b\x02\xb1\x02\x00\x00")

func dataGit_wrapperShBytes() ([]byte, error) {
	return bindataRead(
		_dataGit_wrapperSh,
		"data/git_wrapper.sh",
	)
}

func dataGit_wrapperSh() (*asset, error) {
	bytes, err := dataGit_wrapperShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/git_wrapper.sh", size: 689, mode: os.FileMode(420), modTime: time.Unix(1426541666, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataStatus_shortcutsSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x5b\x6f\xdb\x3a\x0c\x7e\x3e\xf9\x15\x3c\xae\x81\x24\x48\x7a\x3b\xaf\x81\x71\x36\x74\x29\xd6\x97\x76\x4b\xda\x3d\xec\x02\x57\xb1\xe8\x5a\x98\x2c\x19\xba\xd4\xed\xb2\xfc\xf7\x51\x72\x9c\x14\xdd\xba\x3e\x45\x0a\x29\xf2\xbb\x90\xb6\x45\xdd\xf8\xb2\xcc\xad\x63\xce\xdb\xd1\x18\xd6\x03\x00\xa9\x0b\x26\xa1\x0f\xa1\xba\xcf\x8b\x8a\x99\x2c\xc1\x64\x40\xd1\x03\x98\x2b\xeb\x0d\x82\xad\x5a\x6d\xb8\x6d\xa4\x70\x20\x2c\x68\x05\xa5\x36\xf0\xc3\x56\x94\x24\x4a\xf8\x02\x87\x0a\x92\xf4\xf3\xf2\x7d\xfe\x69\xbe\x58\x5e\x5c\x5d\x26\xf0\x6d\x06\xae\x42\x05\x16\x9d\x6e\xdc\xd3\x0a\x33\x28\xc5\xac\x2b\xbf\xf0\xaa\x6f\x0e\x1d\xae\x29\xfd\x6a\xea\xa8\xbd\x6b\xbc\x8b\x49\xa3\xdb\x88\xf2\x16\x14\x22\xb7\xe0\x34\xac\x30\x40\x10\x8e\x90\xb4\x0a\xa4\x50\x74\xa7\x66\xa6\x15\x16\x01\x1f\x08\x64\xa1\x39\x06\xa4\xb6\x65\x52\xea\x16\xf9\xbf\xe3\x1d\xdb\xa2\xe6\xf9\xae\xfc\xfe\x92\x25\xe9\xe8\xd8\x5b\x73\xbc\x12\xea\x98\x94\x78\x06\x0c\x0e\x0f\x4b\x21\x51\x0a\xeb\x20\x7d\x33\xde\xea\x43\xe4\x43\x63\x84\x96\x59\x60\x0a\xd0\x18\x6d\xa6\x1d\x86\xc6\x60\x4d\x2f\x0d\xca\xc7\x29\xc5\x38\x34\xcc\x52\x92\xd4\xea\x2e\x3c\xda\x03\xed\x58\x2e\xaf\xdf\x5d\xdd\x5c\xc7\x42\x3b\xd4\xb0\xf2\x0e\x94\x76\x40\xc1\xf9\x62\x41\xe2\x68\xf0\x16\x0d\xc9\xa9\xbd\xe4\x04\x4d\x48\xb2\x0f\xb1\x6b\x0c\xb5\xbd\xdb\xf3\x44\x9b\xa5\xff\xf7\x06\xa5\x48\x0c\x48\xa7\x93\xde\x18\x0a\x00\x18\x24\x7c\x2a\x04\xe9\x5a\x8a\x8e\xd3\x39\xba\xa2\x82\x48\x54\x97\x10\x48\x5b\x18\x95\x46\xd7\x74\x36\xf4\x67\xa7\x37\xe9\x52\x18\x41\xce\x76\xea\x8d\x63\x01\x4a\x0d\x32\x62\x51\x69\x9a\x87\xbd\xb6\x09\xfc\x84\x0a\x19\x0f\x73\x72\xda\x6b\x37\x7f\x68\xb4\x21\x7a\xbe\x5e\x91\x82\x1c\x82\xe6\xf7\xcc\x08\xb6\x0a\x1d\xc3\x80\x21\x23\x20\xa1\x2a\xe5\xf7\x33\x5a\x48\x64\x26\xa7\xbc\x00\xf9\xe2\x7c\x99\x9f\xdd\x2c\xb2\x94\x0e\xb1\xe6\x52\xd7\x61\x5a\x51\x4a\xc2\xdc\xf0\xef\xb6\x1a\x03\xd7\x51\x42\xeb\x9b\xd8\xef\xed\xe5\xf2\x02\xce\xe0\xa3\xd7\x4e\xa8\xbb\x29\x88\x23\x3c\x82\x74\xf8\xd5\x0d\x63\x85\xeb\x8a\xc6\xc6\x61\x4d\xb9\xcc\x3c\x86\x0e\x61\x8e\x18\xb1\x76\x68\x48\x55\xc7\x56\x10\x76\x84\x15\x74\x9f\xc6\xca\x0c\x6c\xc3\x0a\xaa\xd2\x21\xca\x86\xff\x0c\x61\xef\x42\x76\x1a\xa4\x21\x36\x81\x08\x08\x52\x3b\xea\x34\x23\x5c\xd1\x03\xec\x64\x48\x9f\x2f\x61\x8a\x24\x65\x48\x4d\x62\x9a\x44\x07\x38\x99\xd0\x99\x6b\x85\xdb\x4e\xe9\x56\x80\x4e\xd0\x0f\x46\x28\xd7\x8f\x6b\xe7\x58\xf4\xca\xb5\x9a\xf6\xa5\x65\x86\x07\x97\xfe\x68\x8e\x63\x42\x06\x73\x26\xff\x6d\x17\x13\x69\x6f\xc3\x82\x07\x57\x84\xd1\xaa\x46\x2a\x4d\xab\xc7\xb1\x64\x5e\xba\xd7\xf7\xde\xab\x97\x36\x7f\x33\x18\x0c\x0e\xe0\x2c\xf8\xf8\x82\xf9\x83\xdf\xcd\x7e\xfd\x7b\xd5\x07\x45\x76\xb2\x17\x9f\x12\xe8\x75\x2e\xb2\x74\xfd\xfc\xd1\x26\x5d\x8b\x4d\x60\xeb\x15\x6d\x11\x71\x49\xd2\xf5\x2e\x7f\x22\x6c\xae\xbc\x94\x9b\x48\x68\xeb\x54\xa4\x04\x4f\xb2\x36\x9d\x81\x7f\x6d\x32\x1a\xc1\x64\x22\x60\x3c\xee\x9d\xdb\x0c\x7e\x05\x00\x00\xff\xff\xb7\xd9\x36\x51\x8a\x05\x00\x00")

func dataStatus_shortcutsShBytes() ([]byte, error) {
	return bindataRead(
		_dataStatus_shortcutsSh,
		"data/status_shortcuts.sh",
	)
}

func dataStatus_shortcutsSh() (*asset, error) {
	bytes, err := dataStatus_shortcutsShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/status_shortcuts.sh", size: 1418, mode: os.FileMode(420), modTime: time.Unix(1426541666, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/aliases.sh": dataAliasesSh,
	"data/git_wrapper.sh": dataGit_wrapperSh,
	"data/status_shortcuts.sh": dataStatus_shortcutsSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"aliases.sh": &bintree{dataAliasesSh, map[string]*bintree{}},
		"git_wrapper.sh": &bintree{dataGit_wrapperSh, map[string]*bintree{}},
		"status_shortcuts.sh": &bintree{dataStatus_shortcutsSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

