// Code generated by go-bindata.
// sources:
// data/aliases.sh
// data/git_wrapper.sh
// data/status_shortcuts.sh
// DO NOT EDIT!

package inits

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAliasesSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\xc9\x41\x0a\xc4\x20\x0c\x05\xd0\xfd\x9c\xc2\x9d\xa7\xf0\x2c\x43\x48\x8c\x95\x5a\x2c\xfe\x78\xff\x16\x52\xb2\x7d\x8f\x46\x27\xa4\x86\x92\xc1\xd7\xbd\x55\xff\x30\xb2\x8d\xfc\xfb\x86\x4a\x6e\xdd\x12\x89\x04\x89\x93\x74\xd5\xb0\xe1\x36\x66\x0b\xe2\xe9\xc6\x47\xe5\x73\x6e\x8b\x58\xf0\x58\x15\xf5\xd5\x27\x00\x00\xff\xff\xb3\xf6\xf4\x39\x83\x00\x00\x00")

func dataAliasesShBytes() ([]byte, error) {
	return bindataRead(
		_dataAliasesSh,
		"data/aliases.sh",
	)
}

func dataAliasesSh() (*asset, error) {
	bytes, err := dataAliasesShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aliases.sh", size: 131, mode: os.FileMode(420), modTime: time.Unix(1426541666, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataGit_wrapperSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x51\x4f\x6b\xdb\x30\x14\xbf\xeb\x53\x3c\x9c\xb0\xc4\x63\x21\x64\x57\xb3\x30\xc8\xc8\xd8\x21\x30\xb6\x85\x5d\x0a\x41\xb1\x9f\xec\x47\x65\xc9\x48\xb2\x93\x50\xf7\xbb\xf7\xc9\x49\x7b\x08\x0d\x2d\xf4\x24\xde\xef\xaf\x9e\x34\x82\x3f\x58\xdb\x0e\x41\x9a\x13\xe0\x91\x7c\x20\x53\x42\x49\x01\xa4\x26\xe9\xc1\x3a\x50\xad\xc9\x03\x59\x23\x5a\x73\xc6\x22\xbb\x84\x79\x81\xdd\xdc\xb4\x5a\xc3\xd7\xe5\xa7\x05\x93\x1e\x03\xcc\xd4\xeb\xac\x18\xc1\xd6\x23\x84\x0a\x39\x8e\xc1\x46\x86\x0a\x82\x1d\xc4\x7c\xc8\xce\x52\x01\x64\x14\x19\x0a\x08\xda\xda\x06\x0e\xc4\x92\xc8\xbf\xf4\xe3\xb1\xb1\x2e\xc0\xdf\xd5\xe6\xf7\x76\xbd\xde\xfd\xfc\xf5\x6f\xb7\xda\xfc\xf8\x96\x8c\xa7\x77\x87\x8a\xf2\x41\x9d\x26\xb1\xeb\xbf\x93\xcd\xe0\x1d\x42\x62\xeb\xa4\x6a\xf7\x93\x08\xf1\x09\x07\xa6\x1b\x74\x5f\x80\x14\x97\xfa\x20\xb5\xc6\x42\xf0\x10\x4e\x0d\x42\x54\x5c\x2f\x90\xc5\x10\x03\xb7\x6e\xc0\x96\x24\x03\x45\x42\x70\xc3\x34\x85\x07\x01\x90\x4b\x5e\x78\xbc\xe0\x02\x1e\x78\xb4\x75\x4d\xa1\xdf\x6b\x59\x63\xaf\x6d\xd9\x3b\xdc\xb3\xa2\xaf\xd1\x95\x98\x0e\x12\x00\xec\xa4\x06\xde\xc7\xe7\x75\xd3\x2a\x15\xfb\xa4\x29\x60\x36\x63\xf0\xaa\x34\x61\xe8\x7b\x92\x26\x59\x76\x8e\xaf\x30\xbf\xb7\x6d\xe8\x0b\x52\xaa\x77\x35\xc7\xf3\x7f\xbc\x99\xeb\x50\xcb\x40\xfc\xfd\xef\xa8\x90\x45\xf1\x81\x7b\x5e\x9c\x17\xc7\x8e\x1f\x3d\xb4\xfe\x92\xfc\xf9\x39\xf7\x86\x7b\x90\xa1\x97\xb9\x78\x14\x4f\x01\x00\x00\xff\xff\x51\x13\x5b\x02\xb1\x02\x00\x00")

func dataGit_wrapperShBytes() ([]byte, error) {
	return bindataRead(
		_dataGit_wrapperSh,
		"data/git_wrapper.sh",
	)
}

func dataGit_wrapperSh() (*asset, error) {
	bytes, err := dataGit_wrapperShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/git_wrapper.sh", size: 689, mode: os.FileMode(420), modTime: time.Unix(1426541666, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataStatus_shortcutsSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x94\xdf\x52\xdb\x3a\x10\xc6\xaf\x4f\x9e\x62\x4f\xf0\x4c\x12\x48\x80\x9c\xbb\x33\x19\x4f\xdb\xa1\x61\xca\x0d\xb4\x09\xf4\xa2\x84\x1a\xc5\x5a\x63\x4d\x65\xc9\xa3\x3f\x31\xb4\xf0\xee\x5d\xc9\x31\xe9\xd0\x32\xbd\x49\xac\x68\xbd\xfb\xed\xef\xdb\x8d\xcd\xab\xda\x17\x45\x66\x1d\x73\xde\x0e\x47\xf0\xa3\x07\x20\x75\xce\x24\x74\x57\xa8\x36\x59\x5e\x32\x93\xf6\xb1\xdf\xa3\xdb\x3d\x98\x2b\xeb\x0d\x82\x2d\x1b\x6d\xb8\xad\xa5\x70\x20\x2c\x68\x05\x85\x36\xf0\xdd\x96\x14\x24\x0a\xb8\x86\x89\x82\x7e\xf2\x65\xf9\x21\xfb\x3c\x5f\x2c\xcf\x2e\xce\xfb\x70\x33\x03\x57\xa2\x02\x8b\x4e\xd7\xee\xd7\x0c\x33\x28\xc4\xac\x4d\xbf\xf0\xaa\x2b\x0e\xad\xae\x31\x7d\x6b\xaa\xa8\xbd\xab\xbd\x8b\x41\xc3\xdb\xa8\xf2\x16\x14\x22\xb7\xe0\x34\xac\x31\x48\x10\x8e\x94\x34\x0a\xa4\x50\x74\xa6\x62\xa6\x11\x16\x01\xef\x49\x64\xae\x39\x06\xa5\xb6\x61\x52\xea\x06\xf9\xbf\xa3\xe7\x6e\xf3\x8a\x67\xcf\xe9\x77\x87\xb4\x9f\x0c\x8f\xbc\x35\x47\x6b\xa1\x8e\x88\xc4\x0b\x61\x30\x99\x14\x42\xa2\x14\xd6\x41\xf2\x76\xb4\xe5\x43\xcd\x87\xc2\x08\x0d\xb3\xc0\x14\xa0\x31\xda\x8c\x5b\x0d\xb5\xc1\x8a\xde\x34\x28\x1f\xc6\x74\xc7\xa1\x66\x96\x82\xa4\x56\x77\xe1\xa5\x9d\xd0\xb6\xcb\xe5\xe5\xfb\x8b\xab\xcb\x98\xe8\x59\x35\xac\xbd\x03\xa5\x1d\xd0\xe5\x7c\xb1\x20\x38\x1a\xbc\x45\x43\x38\xb5\x97\x9c\xa4\x09\x49\xf6\x21\xb6\x85\xa1\xb2\x77\xbb\x3e\xd1\xa6\xc9\x9b\xce\xa0\x04\xa9\x03\xe2\x74\xdc\x19\x43\x17\x00\x06\x49\x9f\x0a\x97\x74\x2c\x44\xdb\xd3\x29\xba\xbc\x84\xd8\xa8\x2e\x20\x34\x6d\x61\x58\x18\x5d\xd1\xb3\xa1\x1f\x5b\xde\xc4\x25\x37\x82\x9c\x6d\xe9\x8d\x62\x02\x0a\x0d\x18\x31\x2f\x35\xcd\xc3\x8e\x6d\x1f\x1e\xa1\x44\xc6\xc3\x9c\x4c\x3b\x76\xf3\xfb\x5a\x1b\x6a\xcf\x57\x6b\x22\xc8\x21\x30\xdf\x30\x23\xd8\x3a\x54\x0c\x03\x86\x8c\x84\x84\xac\x14\xdf\xcd\x68\x2e\x91\x99\x8c\xe2\x82\xe4\xb3\xd3\x65\x76\x72\xb5\x48\x13\x7a\x88\x39\x97\xba\x0a\xd3\x8a\x52\x92\xe6\x9a\x7f\xb3\xe5\x08\xb8\x8e\x08\xad\xaf\x63\xbd\x77\xe7\xcb\x33\x38\x81\x4f\x5e\x3b\xa1\xee\xc6\x20\x0e\xf1\x10\x92\xc1\xca\x0d\x62\x86\xcb\x92\xc6\xc6\x61\x45\xb1\xcc\x3c\x84\x0a\x61\x8e\x18\x75\xed\xd0\x10\x55\xc7\xd6\x10\x76\x84\xe5\x74\x1e\xc7\xcc\x0c\x6c\xcd\x72\xca\xd2\x2a\x4a\x07\xff\x0c\x60\xe7\x42\x3a\x0d\x68\xa8\x9b\xd0\x08\x08\xa2\x1d\x39\xcd\x48\x57\xf4\x00\x5b\x0c\xc9\xcb\x25\x4c\x90\x50\x86\xd0\x7e\x0c\x93\xe8\x00\x0f\x0e\xe8\x99\x6b\x85\xdb\x4a\xc9\x16\x40\x0b\xf4\xa3\x11\xca\x75\xe3\xda\x3a\x16\xbd\x72\x8d\xa6\x7d\x69\x98\xe1\xc1\xa5\x3f\x9a\xe3\x98\x90\xc1\x9c\x83\xff\xb6\x8b\x89\xb4\xb7\x61\xc1\x83\x2b\xc2\x68\x55\x21\xa5\xa6\xd5\xe3\x58\x30\x2f\xdd\xdf\xf7\xde\xab\xd7\x36\xff\xa9\xd7\xdb\x83\x93\x60\xe3\x2b\xde\xf7\x7e\xf7\x7a\xfb\x77\x15\x30\x6e\x22\xc3\x61\xd0\xf7\x48\xa3\x1f\x67\x6a\x60\xb3\xaf\xab\x21\x5e\x4f\x27\xff\xdf\x5c\x1f\xd3\xc7\xfe\x6a\x94\x1e\xee\x67\xab\x69\x56\x0f\x46\x91\x59\x84\x18\x45\x41\xb2\xe9\x28\x3e\xf5\x7e\x06\x00\x00\xff\xff\x4c\xe8\x1d\x90\x16\x05\x00\x00")

func dataStatus_shortcutsShBytes() ([]byte, error) {
	return bindataRead(
		_dataStatus_shortcutsSh,
		"data/status_shortcuts.sh",
	)
}

func dataStatus_shortcutsSh() (*asset, error) {
	bytes, err := dataStatus_shortcutsShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/status_shortcuts.sh", size: 1302, mode: os.FileMode(420), modTime: time.Unix(1426541666, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/aliases.sh": dataAliasesSh,
	"data/git_wrapper.sh": dataGit_wrapperSh,
	"data/status_shortcuts.sh": dataStatus_shortcutsSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"aliases.sh": &bintree{dataAliasesSh, map[string]*bintree{}},
		"git_wrapper.sh": &bintree{dataGit_wrapperSh, map[string]*bintree{}},
		"status_shortcuts.sh": &bintree{dataStatus_shortcutsSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

